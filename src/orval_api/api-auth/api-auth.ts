/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.33
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { Auth } from "../model/auth";
import type { HTTPValidationError } from "../model/hTTPValidationError";
import type { Token } from "../model/token";

/**
 * Logs in a user
 * @summary Get Token
 */
export const aPIGetToken = (
  auth: Auth,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Token>> => {
  return axios.post(`http://127.0.0.1:5002/api/auth/token`, auth, options);
};

export const getAPIGetTokenMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aPIGetToken>>,
    TError,
    { data: Auth },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof aPIGetToken>>,
  TError,
  { data: Auth },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof aPIGetToken>>,
    { data: Auth }
  > = (props) => {
    const { data } = props ?? {};

    return aPIGetToken(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type APIGetTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof aPIGetToken>>
>;
export type APIGetTokenMutationBody = Auth;
export type APIGetTokenMutationError = AxiosError<HTTPValidationError>;

/**
 * @summary Get Token
 */
export const useAPIGetToken = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aPIGetToken>>,
    TError,
    { data: Auth },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getAPIGetTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
