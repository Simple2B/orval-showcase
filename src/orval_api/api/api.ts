/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.33
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import type { Auth } from "../model/auth";
import type { BodyAPILogin } from "../model/bodyAPILogin";
import type { HTTPValidationError } from "../model/hTTPValidationError";
import type { RoomCreateIn } from "../model/roomCreateIn";
import type { RoomDetailsOut } from "../model/roomDetailsOut";
import type { RoomSummaryOut } from "../model/roomSummaryOut";
import type { RoomTokenOut } from "../model/roomTokenOut";
import type { Token } from "../model/token";
import type { User } from "../model/user";

/**
 * Returns the current user profile
 * @summary Get Current User Profile
 */
export const aPIGetCurrentUserProfile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<User>> => {
  return axios.get(`http://127.0.0.1:5002/api/users/me`, options);
};

export const getAPIGetCurrentUserProfileQueryKey = () => {
  return [`http://127.0.0.1:5002/api/users/me`] as const;
};

export const getAPIGetCurrentUserProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAPIGetCurrentUserProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>
  > = ({ signal }) => aPIGetCurrentUserProfile({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type APIGetCurrentUserProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>
>;
export type APIGetCurrentUserProfileQueryError = AxiosError<unknown>;

/**
 * @summary Get Current User Profile
 */
export const useAPIGetCurrentUserProfile = <
  TData = Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof aPIGetCurrentUserProfile>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAPIGetCurrentUserProfileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Deletes the current user
 * @summary Delete Current User
 */
export const aPIDeleteCurrentUser = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`http://127.0.0.1:5002/api/users/me`, options);
};

export const getAPIDeleteCurrentUserMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aPIDeleteCurrentUser>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof aPIDeleteCurrentUser>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof aPIDeleteCurrentUser>>,
    void
  > = () => {
    return aPIDeleteCurrentUser(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type APIDeleteCurrentUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof aPIDeleteCurrentUser>>
>;

export type APIDeleteCurrentUserMutationError = AxiosError<unknown>;

/**
 * @summary Delete Current User
 */
export const useAPIDeleteCurrentUser = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aPIDeleteCurrentUser>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getAPIDeleteCurrentUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Logs in a user
 * @summary Login
 */
export const aPILogin = (
  bodyAPILogin: BodyAPILogin,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Token>> => {
  const formUrlEncoded = new URLSearchParams();
  if (bodyAPILogin.grant_type !== undefined) {
    formUrlEncoded.append("grant_type", bodyAPILogin.grant_type);
  }
  formUrlEncoded.append("username", bodyAPILogin.username);
  formUrlEncoded.append("password", bodyAPILogin.password);
  if (bodyAPILogin.scope !== undefined) {
    formUrlEncoded.append("scope", bodyAPILogin.scope);
  }
  if (bodyAPILogin.client_id !== undefined) {
    formUrlEncoded.append("client_id", bodyAPILogin.client_id);
  }
  if (bodyAPILogin.client_secret !== undefined) {
    formUrlEncoded.append("client_secret", bodyAPILogin.client_secret);
  }

  return axios.post(
    `http://127.0.0.1:5002/api/auth/login`,
    formUrlEncoded,
    options
  );
};

export const getAPILoginMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aPILogin>>,
    TError,
    { data: BodyAPILogin },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof aPILogin>>,
  TError,
  { data: BodyAPILogin },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof aPILogin>>,
    { data: BodyAPILogin }
  > = (props) => {
    const { data } = props ?? {};

    return aPILogin(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type APILoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof aPILogin>>
>;
export type APILoginMutationBody = BodyAPILogin;
export type APILoginMutationError = AxiosError<HTTPValidationError>;

/**
 * @summary Login
 */
export const useAPILogin = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aPILogin>>,
    TError,
    { data: BodyAPILogin },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getAPILoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Logs in a user
 * @summary Get Token
 */
export const aPIGetToken = (
  auth: Auth,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Token>> => {
  return axios.post(`http://127.0.0.1:5002/api/auth/token`, auth, options);
};

export const getAPIGetTokenMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aPIGetToken>>,
    TError,
    { data: Auth },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof aPIGetToken>>,
  TError,
  { data: Auth },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof aPIGetToken>>,
    { data: Auth }
  > = (props) => {
    const { data } = props ?? {};

    return aPIGetToken(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type APIGetTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof aPIGetToken>>
>;
export type APIGetTokenMutationBody = Auth;
export type APIGetTokenMutationError = AxiosError<HTTPValidationError>;

/**
 * @summary Get Token
 */
export const useAPIGetToken = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aPIGetToken>>,
    TError,
    { data: Auth },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getAPIGetTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Room Token
 */
export const aPIGetRoomToken = (
  roomName: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RoomTokenOut>> => {
  return axios.get(
    `http://127.0.0.1:5002/api/rooms/token/${roomName}`,
    options
  );
};

export const getAPIGetRoomTokenQueryKey = (roomName: string) => {
  return [`http://127.0.0.1:5002/api/rooms/token/${roomName}`] as const;
};

export const getAPIGetRoomTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof aPIGetRoomToken>>,
  TError = AxiosError<HTTPValidationError>
>(
  roomName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof aPIGetRoomToken>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAPIGetRoomTokenQueryKey(roomName);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof aPIGetRoomToken>>> = ({
    signal,
  }) => aPIGetRoomToken(roomName, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!roomName,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof aPIGetRoomToken>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type APIGetRoomTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof aPIGetRoomToken>>
>;
export type APIGetRoomTokenQueryError = AxiosError<HTTPValidationError>;

/**
 * @summary Get Room Token
 */
export const useAPIGetRoomToken = <
  TData = Awaited<ReturnType<typeof aPIGetRoomToken>>,
  TError = AxiosError<HTTPValidationError>
>(
  roomName: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof aPIGetRoomToken>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAPIGetRoomTokenQueryOptions(roomName, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Rooms
 */
export const aPIGetRooms = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RoomSummaryOut[]>> => {
  return axios.get(`http://127.0.0.1:5002/api/rooms/`, options);
};

export const getAPIGetRoomsQueryKey = () => {
  return [`http://127.0.0.1:5002/api/rooms/`] as const;
};

export const getAPIGetRoomsQueryOptions = <
  TData = Awaited<ReturnType<typeof aPIGetRooms>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof aPIGetRooms>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAPIGetRoomsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof aPIGetRooms>>> = ({
    signal,
  }) => aPIGetRooms({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof aPIGetRooms>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type APIGetRoomsQueryResult = NonNullable<
  Awaited<ReturnType<typeof aPIGetRooms>>
>;
export type APIGetRoomsQueryError = AxiosError<unknown>;

/**
 * @summary Get Rooms
 */
export const useAPIGetRooms = <
  TData = Awaited<ReturnType<typeof aPIGetRooms>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof aPIGetRooms>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAPIGetRoomsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create Room
 */
export const aPICreateRoom = (
  roomCreateIn: RoomCreateIn,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RoomDetailsOut>> => {
  return axios.post(`http://127.0.0.1:5002/api/rooms/`, roomCreateIn, options);
};

export const getAPICreateRoomMutationOptions = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aPICreateRoom>>,
    TError,
    { data: RoomCreateIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof aPICreateRoom>>,
  TError,
  { data: RoomCreateIn },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof aPICreateRoom>>,
    { data: RoomCreateIn }
  > = (props) => {
    const { data } = props ?? {};

    return aPICreateRoom(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type APICreateRoomMutationResult = NonNullable<
  Awaited<ReturnType<typeof aPICreateRoom>>
>;
export type APICreateRoomMutationBody = RoomCreateIn;
export type APICreateRoomMutationError = AxiosError<HTTPValidationError>;

/**
 * @summary Create Room
 */
export const useAPICreateRoom = <
  TError = AxiosError<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aPICreateRoom>>,
    TError,
    { data: RoomCreateIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getAPICreateRoomMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary List Endpoints
 */
export const aPIListEndpoints = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<unknown>> => {
  return axios.get(`http://127.0.0.1:5002/api/list-endpoints/`, options);
};

export const getAPIListEndpointsQueryKey = () => {
  return [`http://127.0.0.1:5002/api/list-endpoints/`] as const;
};

export const getAPIListEndpointsQueryOptions = <
  TData = Awaited<ReturnType<typeof aPIListEndpoints>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof aPIListEndpoints>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAPIListEndpointsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof aPIListEndpoints>>
  > = ({ signal }) => aPIListEndpoints({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof aPIListEndpoints>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type APIListEndpointsQueryResult = NonNullable<
  Awaited<ReturnType<typeof aPIListEndpoints>>
>;
export type APIListEndpointsQueryError = AxiosError<unknown>;

/**
 * @summary List Endpoints
 */
export const useAPIListEndpoints = <
  TData = Awaited<ReturnType<typeof aPIListEndpoints>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof aPIListEndpoints>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAPIListEndpointsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
