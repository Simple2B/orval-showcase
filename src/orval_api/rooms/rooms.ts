/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.33
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  HTTPValidationError
} from '../model/hTTPValidationError'
import type {
  RoomCreateIn
} from '../model/roomCreateIn'
import type {
  RoomDetailsOut
} from '../model/roomDetailsOut'
import type {
  RoomSummaryOut
} from '../model/roomSummaryOut'
import type {
  RoomTokenOut
} from '../model/roomTokenOut'



/**
 * @summary Get Room Token
 */
export const aPIGetRoomToken = (
    roomName: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoomTokenOut>> => {
    
    return axios.get(
      `http://127.0.0.1:5002/api/rooms/token/${roomName}`,options
    );
  }


export const getAPIGetRoomTokenQueryKey = (roomName: string,) => {
    return [`http://127.0.0.1:5002/api/rooms/token/${roomName}`] as const;
    }

    
export const getAPIGetRoomTokenQueryOptions = <TData = Awaited<ReturnType<typeof aPIGetRoomToken>>, TError = AxiosError<HTTPValidationError>>(roomName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aPIGetRoomToken>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAPIGetRoomTokenQueryKey(roomName);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof aPIGetRoomToken>>> = ({ signal }) => aPIGetRoomToken(roomName, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(roomName), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof aPIGetRoomToken>>, TError, TData> & { queryKey: QueryKey }
}

export type APIGetRoomTokenQueryResult = NonNullable<Awaited<ReturnType<typeof aPIGetRoomToken>>>
export type APIGetRoomTokenQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Room Token
 */
export const useAPIGetRoomToken = <TData = Awaited<ReturnType<typeof aPIGetRoomToken>>, TError = AxiosError<HTTPValidationError>>(
 roomName: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aPIGetRoomToken>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAPIGetRoomTokenQueryOptions(roomName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Rooms
 */
export const aPIGetRooms = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoomSummaryOut[]>> => {
    
    return axios.get(
      `http://127.0.0.1:5002/api/rooms/`,options
    );
  }


export const getAPIGetRoomsQueryKey = () => {
    return [`http://127.0.0.1:5002/api/rooms/`] as const;
    }

    
export const getAPIGetRoomsQueryOptions = <TData = Awaited<ReturnType<typeof aPIGetRooms>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aPIGetRooms>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAPIGetRoomsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof aPIGetRooms>>> = ({ signal }) => aPIGetRooms({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof aPIGetRooms>>, TError, TData> & { queryKey: QueryKey }
}

export type APIGetRoomsQueryResult = NonNullable<Awaited<ReturnType<typeof aPIGetRooms>>>
export type APIGetRoomsQueryError = AxiosError<unknown>

/**
 * @summary Get Rooms
 */
export const useAPIGetRooms = <TData = Awaited<ReturnType<typeof aPIGetRooms>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof aPIGetRooms>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getAPIGetRoomsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Room
 */
export const aPICreateRoom = (
    roomCreateIn: RoomCreateIn, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RoomDetailsOut>> => {
    
    return axios.post(
      `http://127.0.0.1:5002/api/rooms/`,
      roomCreateIn,options
    );
  }



export const getAPICreateRoomMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPICreateRoom>>, TError,{data: RoomCreateIn}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof aPICreateRoom>>, TError,{data: RoomCreateIn}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof aPICreateRoom>>, {data: RoomCreateIn}> = (props) => {
          const {data} = props ?? {};

          return  aPICreateRoom(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type APICreateRoomMutationResult = NonNullable<Awaited<ReturnType<typeof aPICreateRoom>>>
    export type APICreateRoomMutationBody = RoomCreateIn
    export type APICreateRoomMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Create Room
 */
export const useAPICreateRoom = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof aPICreateRoom>>, TError,{data: RoomCreateIn}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getAPICreateRoomMutationOptions(options);

      return useMutation(mutationOptions);
    }
    