/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.33
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Auth
} from '../model/auth'
import type {
  BodyAPILogin
} from '../model/bodyAPILogin'
import type {
  RoomCreateIn
} from '../model/roomCreateIn'
import type {
  RoomDetailsOut
} from '../model/roomDetailsOut'
import type {
  RoomSummaryOut
} from '../model/roomSummaryOut'
import type {
  RoomTokenOut
} from '../model/roomTokenOut'
import type {
  Token
} from '../model/token'
import type {
  User
} from '../model/user'



  export const getApi = () => {
/**
 * Returns the current user profile
 * @summary Get Current User Profile
 */
const aPIGetCurrentUserProfile = <TData = AxiosResponse<User>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://127.0.0.1:5002/api/users/me`,options
    );
  }
/**
 * Deletes the current user
 * @summary Delete Current User
 */
const aPIDeleteCurrentUser = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `http://127.0.0.1:5002/api/users/me`,options
    );
  }
/**
 * Logs in a user
 * @summary Login
 */
const aPILogin = <TData = AxiosResponse<Token>>(
    bodyAPILogin: BodyAPILogin, options?: AxiosRequestConfig
 ): Promise<TData> => {const formUrlEncoded = new URLSearchParams();
if(bodyAPILogin.grant_type !== undefined) {
 formUrlEncoded.append('grant_type', bodyAPILogin.grant_type)
 }
formUrlEncoded.append('username', bodyAPILogin.username)
formUrlEncoded.append('password', bodyAPILogin.password)
if(bodyAPILogin.scope !== undefined) {
 formUrlEncoded.append('scope', bodyAPILogin.scope)
 }
if(bodyAPILogin.client_id !== undefined) {
 formUrlEncoded.append('client_id', bodyAPILogin.client_id)
 }
if(bodyAPILogin.client_secret !== undefined) {
 formUrlEncoded.append('client_secret', bodyAPILogin.client_secret)
 }

    return axios.post(
      `http://127.0.0.1:5002/api/auth/login`,
      formUrlEncoded,options
    );
  }
/**
 * Logs in a user
 * @summary Get Token
 */
const aPIGetToken = <TData = AxiosResponse<Token>>(
    auth: Auth, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://127.0.0.1:5002/api/auth/token`,
      auth,options
    );
  }
/**
 * @summary Get Room Token
 */
const aPIGetRoomToken = <TData = AxiosResponse<RoomTokenOut>>(
    roomName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://127.0.0.1:5002/api/rooms/token/${roomName}`,options
    );
  }
/**
 * @summary Get Rooms
 */
const aPIGetRooms = <TData = AxiosResponse<RoomSummaryOut[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://127.0.0.1:5002/api/rooms/`,options
    );
  }
/**
 * @summary Create Room
 */
const aPICreateRoom = <TData = AxiosResponse<RoomDetailsOut>>(
    roomCreateIn: RoomCreateIn, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://127.0.0.1:5002/api/rooms/`,
      roomCreateIn,options
    );
  }
/**
 * @summary List Endpoints
 */
const aPIListEndpoints = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://127.0.0.1:5002/api/list-endpoints/`,options
    );
  }
return {aPIGetCurrentUserProfile,aPIDeleteCurrentUser,aPILogin,aPIGetToken,aPIGetRoomToken,aPIGetRooms,aPICreateRoom,aPIListEndpoints}};
export type APIGetCurrentUserProfileResult = AxiosResponse<User>
export type APIDeleteCurrentUserResult = AxiosResponse<void>
export type APILoginResult = AxiosResponse<Token>
export type APIGetTokenResult = AxiosResponse<Token>
export type APIGetRoomTokenResult = AxiosResponse<RoomTokenOut>
export type APIGetRoomsResult = AxiosResponse<RoomSummaryOut[]>
export type APICreateRoomResult = AxiosResponse<RoomDetailsOut>
export type APIListEndpointsResult = AxiosResponse<unknown>
